$date
	Sat Dec 16 12:28:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_tb $end
$var wire 6 ! Alu_Out [5:0] $end
$var reg 1 " Alu_Add $end
$var reg 1 # Alu_Mul $end
$var reg 1 $ Alu_Pass $end
$var reg 1 % Alu_Sub $end
$var reg 6 & Reg1_Out [5:0] $end
$var reg 6 ' Reg2_Out [5:0] $end
$var integer 32 ( file [31:0] $end
$var integer 32 ) operation [31:0] $end
$var integer 32 * test [31:0] $end
$scope module arithmetic_logic_unit $end
$var wire 1 " Alu_Add $end
$var wire 1 # Alu_Mul $end
$var wire 1 $ Alu_Pass $end
$var wire 1 % Alu_Sub $end
$var wire 6 + Reg1_Out [5:0] $end
$var wire 6 , Reg2_Out [5:0] $end
$var reg 6 - Alu_Out [5:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11101 -
b100010 ,
b111011 +
b0 *
b0 )
b10000000000000000000000000000011 (
b100010 '
b111011 &
0%
0$
0#
1"
b11101 !
$end
#5
b101101 !
b101101 -
b101101 '
b101101 ,
b1111 &
b1111 +
1$
b11 )
b1 *
0"
#10
b101 !
b101 -
b110110 '
b110110 ,
b111011 &
b111011 +
1%
b1 )
b10 *
0$
#15
b1 !
b1 -
b11110 '
b11110 ,
b11111 &
b11111 +
b11 *
1%
#20
b11011 !
b11011 -
b101010 '
b101010 ,
b101 &
b101 +
b100 *
1%
#25
b101000 !
b101000 -
b101100 '
b101100 ,
b1110 &
b1110 +
1#
b10 )
b101 *
0%
#30
b110111 !
b110111 -
b100100 '
b100100 ,
b11011 &
b11011 +
1%
b1 )
b110 *
0#
#35
b100101 !
b100101 -
b100101 '
b100101 ,
b111011 &
b111011 +
1$
b11 )
b111 *
0%
#40
b101111 !
b101111 -
b10001 '
b10001 ,
b11110 &
b11110 +
1"
b0 )
b1000 *
0$
#45
b101000 !
b101000 -
b110 '
b110 ,
b101110 &
b101110 +
1%
b1 )
b1001 *
0"
#50
b11001 !
b11001 -
b11001 '
b11001 ,
b1101 &
b1101 +
1$
b11 )
b1010 *
0%
#55
b11110 !
b11110 -
b10010 '
b10010 ,
b1100 &
b1100 +
1"
b0 )
b1011 *
0$
#60
b111000 !
b111000 -
b1000 '
b1000 ,
b10111 &
b10111 +
1#
b10 )
b1100 *
0"
#65
b1100 !
b1100 -
b1100 '
b1100 ,
b111111 &
b111111 +
1$
b11 )
b1101 *
0#
#70
b100000 !
b100000 -
b100 '
b100 ,
b11000 &
b11000 +
1#
b10 )
b1110 *
0$
#75
b1101 !
b1101 -
b1101 '
b1101 ,
b110010 &
b110010 +
1$
b11 )
b1111 *
0#
#80
b100100 !
b100100 -
b100010 '
b100010 ,
1#
b10 )
b10000 *
0$
#85
b10000 !
b10000 -
b10000 '
b10000 ,
b101101 &
b101101 +
b10001 *
1#
#90
b110 !
b110 -
b101 '
b101 ,
b1 &
b1 +
1"
b0 )
b10010 *
0#
#95
b0 !
b0 -
b0 '
b0 ,
b101100 &
b101100 +
1#
b10 )
b10011 *
0"
#100
b101111 !
b101111 -
b101101 '
b101101 ,
b10 &
b10 +
1"
b0 )
b10100 *
0#
#105
b11111 !
b11111 -
b1000 '
b1000 ,
b100111 &
b100111 +
1%
b1 )
b10101 *
0"
#110
b11101 !
b11101 -
b11101 '
b11101 ,
b101010 &
b101010 +
1$
b11 )
b10110 *
0%
#115
b101001 !
b101001 -
b110001 '
b110001 ,
b11010 &
b11010 +
1%
b1 )
b10111 *
0$
#120
b101010 !
b101010 -
b10 '
b10 ,
b10101 &
b10101 +
1#
b10 )
b11000 *
0%
#125
b110010 !
b110010 -
b110010 '
b110010 ,
b1000 &
b1000 +
1$
b11 )
b11001 *
0#
#130
b10000 !
b10000 -
b10000 '
b10000 ,
b110011 &
b110011 +
b11010 *
1$
#135
b110101 !
b110101 -
b100111 '
b100111 ,
b11100 &
b11100 +
1%
b1 )
b11011 *
0$
#140
b101011 !
b101011 -
b101011 '
b101011 ,
b10110 &
b10110 +
1$
b11 )
b11100 *
0%
#145
b100 !
b100 -
b11011 '
b11011 ,
b101001 &
b101001 +
1"
b0 )
b11101 *
0$
#150
b111000 !
b111000 -
b111000 '
b111000 ,
b10111 &
b10111 +
1$
b11 )
b11110 *
0"
#155
b100101 !
b100101 -
b11111 '
b11111 ,
b111011 &
b111011 +
1#
b10 )
b11111 *
0$
#160
b100100 !
b100100 -
b100100 '
b100100 ,
b100101 &
b100101 +
1$
b11 )
b100000 *
0#
#165
b100000 !
b100000 -
b10000 '
b10000 ,
b10000 &
b10000 +
1"
b0 )
b100001 *
0$
#170
b101 !
b101 -
b101 '
b101 ,
b1000 &
b1000 +
1$
b11 )
b100010 *
0"
#175
b1010 !
b1010 -
b10010 '
b10010 ,
b111101 &
b111101 +
1#
b10 )
b100011 *
0$
#180
b101000 !
b101000 -
b1000 '
b1000 ,
b101 &
b101 +
b100100 *
1#
#185
b110110 !
b110110 -
b110110 '
b110110 ,
b11010 &
b11010 +
1$
b11 )
b100101 *
0#
#190
b1001 !
b1001 -
b1001 '
b1001 ,
b110110 &
b110110 +
b100110 *
1$
#195
b11011 !
b11011 -
b11011 '
b11011 ,
b111100 &
b111100 +
b100111 *
1$
#200
b101111 !
b101111 -
b110101 '
b110101 ,
b100100 &
b100100 +
1%
b1 )
b101000 *
0$
#205
b11011 !
b11011 -
b110100 '
b110100 ,
b1111 &
b1111 +
b101001 *
1%
#210
b10011 !
b10011 -
b101000 '
b101000 ,
b111011 &
b111011 +
b101010 *
1%
#215
b1101 !
b1101 -
b111001 '
b111001 ,
b110101 &
b110101 +
1#
b10 )
b101011 *
0%
#220
b110110 !
b110110 -
b101110 '
b101110 ,
b1000 &
b1000 +
1"
b0 )
b101100 *
0#
#225
b1110 !
b1110 -
b1110 '
b1110 ,
b110101 &
b110101 +
1$
b11 )
b101101 *
0"
#230
b111 !
b111 -
b111 '
b111 ,
b110 &
b110 +
b101110 *
1$
#235
b101100 !
b101100 -
b110010 '
b110010 ,
b111010 &
b111010 +
1"
b0 )
b101111 *
0$
#240
b10010 !
b10010 -
b111010 '
b111010 ,
b11000 &
b11000 +
b110000 *
1"
#245
b11001 !
b11001 -
b1001 '
b1001 ,
b100010 &
b100010 +
1%
b1 )
b110001 *
0"
#250
b101111 !
b101111 -
b110100 '
b110100 ,
b100011 &
b100011 +
b110010 *
1%
#255
b100100 !
b100100 -
b101001 '
b101001 ,
b100 &
b100 +
1#
b10 )
b110011 *
0%
#260
b111101 !
b111101 -
b11001 '
b11001 ,
b101 &
b101 +
b110100 *
1#
#265
b111 !
b111 -
b101100 '
b101100 ,
b110011 &
b110011 +
1%
b1 )
b110101 *
0#
#270
b10111 !
b10111 -
b1000 '
b1000 ,
b1111 &
b1111 +
1"
b0 )
b110110 *
0%
#275
b111000 !
b111000 -
b11000 '
b11000 ,
b11101 &
b11101 +
1#
b10 )
b110111 *
0"
#280
b11 !
b11 -
b10101 '
b10101 ,
b11000 &
b11000 +
1%
b1 )
b111000 *
0#
#285
b110110 !
b110110 -
b10001 '
b10001 ,
b10110 &
b10110 +
1#
b10 )
b111001 *
0%
#290
b101110 '
b101110 ,
b11101 &
b11101 +
b111010 *
1#
#295
b10100 !
b10100 -
b110010 '
b110010 ,
b11010 &
b11010 +
b111011 *
1#
#300
b111111 !
b111111 -
b10110 '
b10110 ,
b10101 &
b10101 +
1%
b1 )
b111100 *
0#
#305
b11010 !
b11010 -
b11010 '
b11010 ,
b101010 &
b101010 +
1$
b11 )
b111101 *
0%
#310
b11110 !
b11110 -
b11101 '
b11101 ,
b110110 &
b110110 +
1#
b10 )
b111110 *
0$
#315
b11001 !
b11001 -
b110011 '
b110011 ,
b100110 &
b100110 +
1"
b0 )
b111111 *
0#
#320
b0 !
b0 -
b1000000 *
0"
